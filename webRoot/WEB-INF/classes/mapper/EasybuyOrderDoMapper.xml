<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.EasybuyOrderDoMapper">
  <resultMap id="BaseResultMap" type="model.EasybuyOrderDo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="orderId" jdbcType="INTEGER" property="orderid" />
    <result column="productId" jdbcType="INTEGER" property="productid" />
    <result column="quantity" jdbcType="INTEGER" property="quantity" />
    <result column="cost" jdbcType="REAL" property="cost" />
    <result column="useri" jdbcType="INTEGER" property="userI" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
<sql id="Base_Column_List">
    id, orderId, productId, quantity, cost
</sql>

<select id="selectByExample" parameterType="model.EasybuyOrderDetailExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from easybuy_order_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
</select>
  
<select id="selectAllByExample" parameterType="EasybuyAll" resultMap="AllResultMap">
    select
    
    d.*,
   	p.filename,
   	p.name,
   	p.price
    
    
    <if test="distinct">
      distinct
    </if>
     from easybuy_order_detail d,
     easybuy_product p

    where
    p.id=d.productId

    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
</select>

<resultMap id="AllResultMap" type="EasybuyAll" >
	<id property="id" column="id"/>
 	<result property="orderid" column="orderId"/>
	<result property="productid" column="productId"/>
	<result property="quantity" column="quantity"/>
	<result property="cost" column="cost"/>
	<result property="useri" column="userI"/>
	<association property="easybuyProduct" javaType="EasybuyProduct">
		<id property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="description" column="description"/>
		<result property="price" column="price"/>
		<result property="stock" column="stock"/>
		<result property="categorylevel1id" column="categoryLevel1Id"/>
		<result property="categoryLevel2Id" column="categoryLevel2Id"/>
		<result property="categoryLevel3Id" column="categoryLevel3Id"/>
		<result property="filename" column="fileName"/>
		<result property="isdelete" column="isDelete"/>
	</association>	
</resultMap>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from easybuy_order_detail
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from easybuy_order_detail
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="model.EasybuyOrderDetailExample">
    delete from easybuy_order_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="model.EasybuyOrderDetail">
    insert into easybuy_order_detail (id, orderId, productId, 
      quantity, cost)
    values (#{id,jdbcType=INTEGER}, #{orderid,jdbcType=INTEGER}, #{productid,jdbcType=INTEGER}, 
      #{quantity,jdbcType=INTEGER}, #{cost,jdbcType=REAL})
  </insert>
  <insert id="insertSelective" parameterType="model.EasybuyOrderDetail">
    insert into easybuy_order_detail
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderid != null">
        orderId,
      </if>
      <if test="productid != null">
        productId,
      </if>
      <if test="quantity != null">
        quantity,
      </if>
      <if test="cost != null">
        cost,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderid != null">
        #{orderid,jdbcType=INTEGER},
      </if>
      <if test="productid != null">
        #{productid,jdbcType=INTEGER},
      </if>
      <if test="quantity != null">
        #{quantity,jdbcType=INTEGER},
      </if>
      <if test="cost != null">
        #{cost,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="model.EasybuyOrderDetailExample" resultType="java.lang.Long">
    select count(*) from easybuy_order_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update easybuy_order_detail
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderid != null">
        orderId = #{record.orderid,jdbcType=INTEGER},
      </if>
      <if test="record.productid != null">
        productId = #{record.productid,jdbcType=INTEGER},
      </if>
      <if test="record.quantity != null">
        quantity = #{record.quantity,jdbcType=INTEGER},
      </if>
      <if test="record.cost != null">
        cost = #{record.cost,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update easybuy_order_detail
    set id = #{record.id,jdbcType=INTEGER},
      orderId = #{record.orderid,jdbcType=INTEGER},
      productId = #{record.productid,jdbcType=INTEGER},
      quantity = #{record.quantity,jdbcType=INTEGER},
      cost = #{record.cost,jdbcType=REAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="model.EasybuyOrderDetail">
    update easybuy_order_detail
    <set>
      <if test="orderid != null">
        orderId = #{orderid,jdbcType=INTEGER},
      </if>
      <if test="productid != null">
        productId = #{productid,jdbcType=INTEGER},
      </if>
      <if test="quantity != null">
        quantity = #{quantity,jdbcType=INTEGER},
      </if>
      <if test="cost != null">
        cost = #{cost,jdbcType=REAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.EasybuyOrderDetail">
    update easybuy_order_detail
    set orderId = #{orderid,jdbcType=INTEGER},
      productId = #{productid,jdbcType=INTEGER},
      quantity = #{quantity,jdbcType=INTEGER},
      cost = #{cost,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>